name: CMake

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    name: CMake with default option on the default GitHub Ubuntu
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository code
        uses: actions/checkout@v2

      - name: Install required packages
        run: |
          sudo apt update
          sudo apt install libboost-all-dev librange-v3-dev

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

      - name: Build
        # Build your program with the given configuration
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

      - name: Test
        working-directory: ${{github.workspace}}/build
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest -C ${{env.BUILD_TYPE}}

  docker-gcc7-openmp:
    name: OpenMP & OpenCL POCL with G++ 7

    runs-on: ubuntu-latest

    steps:
      - name: Check out repository code
        uses: actions/checkout@v2

      - uses: docker://ubuntu:hirsute
        env:
          C_COMPILER: gcc-7
          CXX_COMPILER: g++-7
          OPENMP: ON
          OPENCL: ON
        with:
          entrypoint: /github/workspace/.github/workflows/run_ci_in_docker.bash

  docker-gcc11-openmp:
    name: OpenMP with G++ 11

    runs-on: ubuntu-latest

    steps:
      - name: Check out repository code
        uses: actions/checkout@v2

      - uses: docker://ubuntu:hirsute
        env:
          C_COMPILER: gcc-11
          CXX_COMPILER: g++-11
          OPENMP: ON
          OPENCL: OFF
        with:
          entrypoint: /github/workspace/.github/workflows/run_ci_in_docker.bash

  docker-clang12-openmp:
    name: OpenMP with Clang++ 12

    runs-on: ubuntu-latest

    steps:
      - name: Check out repository code
        uses: actions/checkout@v2

      - uses: docker://ubuntu:hirsute
        env:
          C_COMPILER: clang-12
          CXX_COMPILER: clang++-12
          OPENMP: ON
          OPENCL: OFF
        with:
          entrypoint: /github/workspace/.github/workflows/run_ci_in_docker.bash

  docker-gcc11-openmp-opencl-pocl:
    name: OpenMP & OpenCL POCL with G++ 11

    runs-on: ubuntu-latest

    steps:
      - name: Check out repository code
        uses: actions/checkout@v2

      - uses: docker://ubuntu:hirsute
        env:
          C_COMPILER: gcc-11
          CXX_COMPILER: g++-11
          OPENMP: ON
          OPENCL: ON
        with:
          entrypoint: /github/workspace/.github/workflows/run_ci_in_docker.bash

  docker-clang12-openmp-opencl-pocl:
    name: OpenMP & OpenCL POCL with Clang++ 12

    runs-on: ubuntu-latest

    steps:
      - name: Check out repository code
        uses: actions/checkout@v2

      - uses: docker://ubuntu:hirsute
        env:
          C_COMPILER: clang-12
          CXX_COMPILER: clang++-12
          # It looks like POCL uses an older version of Clang/LLVM
          # which conflict with libomp-12-dev libomp5-12 and thus it
          # is not possible to use OpenMP at the same time
          OPENMP: OFF
          OPENCL: ON
        with:
          entrypoint: /github/workspace/.github/workflows/run_ci_in_docker.bash
